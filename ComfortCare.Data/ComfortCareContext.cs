// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ComfortCare.Data.Models
{
    public partial class ComfortCareContext : DbContext
    {
        public ComfortCareContext()
        {
        }

        public ComfortCareContext(DbContextOptions<ComfortCareContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Assignment> Assignment { get; set; }
        public virtual DbSet<AssignmentType> AssignmentType { get; set; }
        public virtual DbSet<Citizen> Citizen { get; set; }
        public virtual DbSet<DayType> DayType { get; set; }
        public virtual DbSet<Distance> Distance { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<EmployeePreference> EmployeePreference { get; set; }
        public virtual DbSet<EmployeeRoute> EmployeeRoute { get; set; }
        public virtual DbSet<EmployeeSkill> EmployeeSkill { get; set; }
        public virtual DbSet<EmployeeStatementPeriod> EmployeeStatementPeriod { get; set; }
        public virtual DbSet<EmployeeType> EmployeeType { get; set; }
        public virtual DbSet<Preference> Preference { get; set; }
        public virtual DbSet<Residence> Residence { get; set; }
        public virtual DbSet<RouteAssignment> RouteAssignment { get; set; }
        public virtual DbSet<Skill> Skill { get; set; }
        public virtual DbSet<StatementPeriod> StatementPeriod { get; set; }
        public virtual DbSet<TimeFrame> TimeFrame { get; set; }
        public virtual DbSet<TimeRegistration> TimeRegistration { get; set; }
        public virtual DbSet<WorkingTimespan> WorkingTimespan { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Assignment>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AssignmentTypeId).HasColumnName("AssignmentTypeID");

                entity.Property(e => e.CitizenId).HasColumnName("CitizenID");

                entity.Property(e => e.EmployeeSkillId).HasColumnName("EmployeeSkillID");

                entity.Property(e => e.EmployeeTypeMasterId).HasColumnName("EmployeeTypeMasterID");

                entity.Property(e => e.EmployeeTypeSlaveId).HasColumnName("EmployeeTypeSlaveID");

                entity.HasOne(d => d.AssignmentType)
                    .WithMany(p => p.Assignment)
                    .HasForeignKey(d => d.AssignmentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Assignmen__Assig__45F365D3");

                entity.HasOne(d => d.Citizen)
                    .WithMany(p => p.Assignment)
                    .HasForeignKey(d => d.CitizenId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Assignmen__Citiz__4316F928");

                entity.HasOne(d => d.EmployeeTypeMaster)
                    .WithMany(p => p.AssignmentEmployeeTypeMaster)
                    .HasForeignKey(d => d.EmployeeTypeMasterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Assignmen__Emplo__440B1D61");

                entity.HasOne(d => d.EmployeeTypeSlave)
                    .WithMany(p => p.AssignmentEmployeeTypeSlave)
                    .HasForeignKey(d => d.EmployeeTypeSlaveId)
                    .HasConstraintName("FK__Assignmen__Emplo__44FF419A");
            });

            modelBuilder.Entity<AssignmentType>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AssignmentTypeDescription)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.TimeFrameId).HasColumnName("TimeFrameID");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.HasOne(d => d.TimeFrame)
                    .WithMany(p => p.AssignmentType)
                    .HasForeignKey(d => d.TimeFrameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Assignmen__TimeF__412EB0B6");
            });

            modelBuilder.Entity<Citizen>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CitizenName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ResidenceId).HasColumnName("ResidenceID");

                entity.HasOne(d => d.Residence)
                    .WithMany(p => p.Citizen)
                    .HasForeignKey(d => d.ResidenceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Citizen__Residen__3A81B327");
            });

            modelBuilder.Entity<DayType>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.WorkingDayType)
                    .IsRequired()
                    .HasMaxLength(254)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Distance>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ResidenceOneId).HasColumnName("ResidenceOneID");

                entity.Property(e => e.ResidenceTwoId).HasColumnName("ResidenceTwoID");

                entity.HasOne(d => d.ResidenceOne)
                    .WithMany(p => p.DistanceResidenceOne)
                    .HasForeignKey(d => d.ResidenceOneId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Distance__Reside__4CA06362");

                entity.HasOne(d => d.ResidenceTwo)
                    .WithMany(p => p.DistanceResidenceTwo)
                    .HasForeignKey(d => d.ResidenceTwoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Distance__Reside__4D94879B");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EmployeeName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeePassword)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeTypeId).HasColumnName("EmployeeTypeID");

                entity.Property(e => e.Initials)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SkillId).HasColumnName("SkillID");

                entity.HasOne(d => d.EmployeeType)
                    .WithMany(p => p.Employee)
                    .HasForeignKey(d => d.EmployeeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Employee__Employ__36B12243");
            });

            modelBuilder.Entity<EmployeePreference>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.PreferenceId).HasColumnName("PreferenceID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeePreference)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__EmployeeP__Emplo__5535A963");

                entity.HasOne(d => d.Preference)
                    .WithMany(p => p.EmployeePreference)
                    .HasForeignKey(d => d.PreferenceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__EmployeeP__Prefe__5629CD9C");
            });

            modelBuilder.Entity<EmployeeRoute>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeRoute)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__EmployeeR__Emplo__47DBAE45");
            });

            modelBuilder.Entity<EmployeeSkill>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.SkillId).HasColumnName("SkillID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeSkill)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__EmployeeS__Emplo__3D5E1FD2");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.EmployeeSkill)
                    .HasForeignKey(d => d.SkillId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__EmployeeS__Skill__3E52440B");
            });

            modelBuilder.Entity<EmployeeStatementPeriod>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.StatementPeriodId).HasColumnName("StatementPeriodID");

                entity.Property(e => e.TimeRegistrationId).HasColumnName("TimeRegistrationID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeStatementPeriod)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__EmployeeS__Emplo__5812160E");

                entity.HasOne(d => d.StatementPeriod)
                    .WithMany(p => p.EmployeeStatementPeriod)
                    .HasForeignKey(d => d.StatementPeriodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__EmployeeS__State__59063A47");

                entity.HasOne(d => d.TimeRegistration)
                    .WithMany(p => p.EmployeeStatementPeriod)
                    .HasForeignKey(d => d.TimeRegistrationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__EmployeeS__TimeR__59FA5E80");
            });

            modelBuilder.Entity<EmployeeType>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Preference>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DayTypeId).HasColumnName("DayTypeID");

                entity.Property(e => e.WorkingTimespanId).HasColumnName("WorkingTimespanID");

                entity.HasOne(d => d.DayType)
                    .WithMany(p => p.Preference)
                    .HasForeignKey(d => d.DayTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Preferenc__DayTy__52593CB8");

                entity.HasOne(d => d.WorkingTimespan)
                    .WithMany(p => p.Preference)
                    .HasForeignKey(d => d.WorkingTimespanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Preferenc__Worki__5165187F");
            });

            modelBuilder.Entity<Residence>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CitizenResidence)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Latitude)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Longitude)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RouteAssignment>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ArrivalTime).HasColumnType("datetime");

                entity.Property(e => e.AssignmentId).HasColumnName("AssignmentID");

                entity.Property(e => e.EmployeeRouteId).HasColumnName("EmployeeRouteID");

                entity.HasOne(d => d.Assignment)
                    .WithMany(p => p.RouteAssignment)
                    .HasForeignKey(d => d.AssignmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RouteAssi__Assig__49C3F6B7");

                entity.HasOne(d => d.EmployeeRoute)
                    .WithMany(p => p.RouteAssignment)
                    .HasForeignKey(d => d.EmployeeRouteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RouteAssi__Emplo__4AB81AF0");
            });

            modelBuilder.Entity<Skill>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.SkillDescription)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StatementPeriod>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TimeFrame>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.TimeFrameEnd).HasColumnType("datetime");

                entity.Property(e => e.TimeFrameStart).HasColumnType("datetime");
            });

            modelBuilder.Entity<TimeRegistration>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateStartTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<WorkingTimespan>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.TimeEnd).HasColumnType("datetime");

                entity.Property(e => e.TimeStart).HasColumnType("datetime");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}